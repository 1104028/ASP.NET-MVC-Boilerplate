{"version":3,"sources":["hammer.js"],"names":["window","document","exportName","undefined","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","i","forEach","length","call","hasOwnProperty","extend","dest","src","merge","keys","Object","inherit","child","base","properties","childP","baseP","prototype","create","constructor","_super","apply","arguments","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","target","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","self","this","options","inputTarget","domHandler","ev","enable","init","createInputInstance","Type","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","now","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","scale","getScale","rotation","getRotation","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","x","y","velocity","velocityX","velocityY","direction","last","lastInterval","COMPUTE_INTERVAL","v","getVelocity","abs","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","props","PROPS_XY","Math","sqrt","atan2","PI","start","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","allow","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","TouchAction","value","set","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","Recognizer","id","defaults","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","recognizers","preset","Manager","handlers","touchAction","toggleCssProps","item","add","recognizeWith","requireFailure","cssProps","name","style","triggerDomEvent","event","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","TEST_ELEMENT","createElement","Date","MOBILE_REGEX","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM",2,3,4,5,"MSPointerEvent","removePointer","eventTypeNormalized","toLowerCase","replace","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","PREFIXED_TOUCH_ACTION","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","compute","update","getTouchAction","join","preventDefaults","prevented","preventDefault","hasNone","preventSrc","STATE_RECOGNIZED","STATE_FAILED","dropRecognizeWith","dropRequireFailure","index","hasRequireFailures","canRecognizeWith","withState","tryEmit","canEmit","inputDataClone","process","reset","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","stop","force","stopped","curRecognizer","existing","remove","on","events","off","Tap","Pan","Swipe","Pinch","Rotate","Press","define","amd","module","exports"],"mappings":"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","file":"hammer.js","sourcesContent":["/*! Hammer.JS - v2.0.4 - 2014-09-28\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2014 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge]\n * @returns {Object} dest\n */\nfunction extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nfunction merge(dest, src) {\n    return extend(dest, src, true);\n}\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        extend(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument;\n    return (doc.defaultView || doc.parentWindow);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = last.deltaX - input.deltaX;\n        var deltaY = last.deltaY - input.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y > 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.allow = true; // used by Input.TouchMouse to disable mouse events\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down, and mouse events are allowed (see the TouchMouse input)\n        if (!this.pressed || !this.allow) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        // when we're in a touch event, so  block all upcoming mouse events\n        // most mobile browser also emit mouseevents, right after touchstart\n        if (isTouch) {\n            this.mouse.allow = false;\n        } else if (isMouse && !this.mouse.allow) {\n            return;\n        }\n\n        // reset the allowMouse when we're done\n        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {\n            this.mouse.allow = true;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        // not needed with native support for the touchAction property\n        if (NATIVE_TOUCH_ACTION) {\n            return;\n        }\n\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE);\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // pan-x and pan-y can be combined\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_PAN_X + ' ' + TOUCH_ACTION_PAN_Y;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.id = uniqueId();\n\n    this.manager = null;\n    this.options = merge(options || {}, this.defaults);\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        extend(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(withState) {\n            self.manager.emit(self.options.event + (withState ? stateStr(state) : ''), input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(true);\n        }\n\n        emit(); // simple 'eventName' events\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(true);\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = extend({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        this._super.emit.call(this, input);\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            this.manager.emit(this.options.event + inOut, input);\n        }\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 500, // minimal time of the pointer to be pressed\n        threshold: 5 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.65,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.velocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.velocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.velocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.direction &&\n            input.distance > this.options.threshold &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.direction);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 2, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED ) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create an manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.4';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, { enable: false }],\n        [PinchRecognizer, { enable: false }, ['rotate']],\n        [SwipeRecognizer,{ direction: DIRECTION_HORIZONTAL }],\n        [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    options = options || {};\n\n    this.options = merge(options, Hammer.defaults);\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        extend(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        var recognizers = this.recognizers;\n        recognizer = this.get(recognizer);\n        recognizers.splice(inArray(recognizers, recognizer), 1);\n\n        this.touchAction.update();\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    each(manager.options.cssProps, function(value, name) {\n        element.style[prefixed(element.style, name)] = add ? value : '';\n    });\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nextend(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\nif (typeof define == TYPE_FUNCTION && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n"],"sourceRoot":"/source/"}