IHttpContextAccessor to get HttpContext
IOptions<AppSettings>
IApplicationEnvironment appEnvironment

In development use
app.UseErrorPage();
otherwise
https://github.com/aspnet/Diagnostics/blob/dev/samples/StatusCodePagesSample/Startup.cs
Configure the error handler to show an error page.
app.UseErrorHandler(errorApp =>
{
    // Normally you'd use MVC or similar to render a nice page.
    errorApp.Run(async context =>
    {
        context.Response.StatusCode = 500;
        context.Response.ContentType = "text/html";
        await context.Response.WriteAsync("<html><body>\r\n");
        await context.Response.WriteAsync("We're sorry, we encountered an un-expected issue with your application.<br>\r\n");

        var error = context.GetFeature<IErrorHandlerFeature>();
        if (error != null)
        {
            // This error would not normally be exposed to the client
            await context.Response.WriteAsync("<br>Error: " + HtmlEncoder.Default.HtmlEncode(error.Error.Message) + "<br>\r\n");
        }
        await context.Response.WriteAsync("<br><a href=\"/\">Home</a><br>\r\n");
        await context.Response.WriteAsync("</body></html>\r\n");
        await context.Response.WriteAsync(new string(' ', 512)); // Padding for IE
    });
});






http://stackoverflow.com/questions/30800733/setting-iis-settings-in-web-config-using-asp-net-mvc-6/30806430?noredirect=1#comment49661293_30806430
http://stackoverflow.com/questions/28719467/how-does-asp-net-vnext-handle-caching-compression-mimemap-in-config-json/28729705#28729705
https://github.com/aspnet/StaticFiles/blob/d16a73cc05d842390768f78134c1eeb794215fae/src/Microsoft.AspNet.StaticFiles/FileExtensionContentTypeProvider.cs
As "agua from mars" states in the comments, if you're using IIS you can use IIS's static file handling, in which case you can use the <system.webServer> section in a web.config file and that will work as it always did.
If you're using ASP.NET 5's StaticFileMiddleware then it has its own MIME mappings that come as part of the FileExtensionContentTypeProvider implementation. The StaticFileMiddleware has a StaticFileOptions that you can use to configure it when you initialize it in Startup.cs. In that options class you can set the content type provider. You can instantiate the default content type provider and then just tweak the mappings dictionary, or you can write an entire mapping from scratch (not recommended).





public class AppExceptionFilterAttribute : ExceptionFilterAttribute
{
	private readonly ILogger _logger;
    public AppExceptionFilterAttribute(ILoggerFactory loggerfactory)
    {
       _logger = loggerFactory.CreateLogger<AppExceptionFilterAttribute>();
    }
    public override void OnException(ExceptionContext context)
    {
        logger.WriteError(2, "Error Occurred", context.Exception);

        context.Result = new JsonResult(
            new
            {
                context.Exception.Message,
                context.Exception.StackTrace
            });
    }
}
//Register your filter as a service (Note this filter need not be an attribute as such)
services.AddTransient<AppExceptionFilterAttribute>();
services.Configure<MvcOptions>(options =>
{
    options.Filters.Add(new AppExceptionFilterAttribute());
});

//On the controller/action where you want to apply this filter,
//decorate them like
[ServiceFilter(typeof(AppExceptionFilterAttribute))]
public class HomeController : Controller
{
....
}