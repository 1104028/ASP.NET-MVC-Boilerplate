Status Code Error Pages:
https://github.com/aspnet/Diagnostics/blob/dev/samples/StatusCodePagesSample/Startup.cs
Web API does not need full error pages:
public class Startup
{
	public void Configure(IApplicationBuilder app)
	{
		app.Map("/api", ConfigureApi);

		app.Run(async (context) =>
		{
			await context.Response.WriteAsync("Hello World!");
		});
	}

	private void ConfigureApi(IApplicationBuilder app)
	{
		app.Run(async (context) =>
		{
			await context.Response.WriteAsync("Hello World from API!");
		});
	}
}

Session
"Microsoft.AspNet.Session": "1.0.0-beta5"
app.UseSession();
this.Context.Session.GetInt("UserID");
this.Context.Session.GetString("UserName");
Extension Methods
public static DateTime? GetDateTime(this ISessionCollection collection, string key)  
{
    var data = collection.Get(key);
    if(data == null)
    {
        return null;
    }

    long dateInt = BitConverter.ToInt64(data, 0);
    return new DateTime(dateInt);
}
public static void SetDateTime(this ISessionCollection collection, string key, DateTime value)  
{
collection.Set(key, BitConverter.GetBytes(value.Ticks));
}



AntiForgery changed in beta 6
Microsoft.AspNet.Antiforgery
services.AddAntiforgery();
services.ConfigureAntiforgery(options =>
{
    options.CookieName = "My-Cookie";
});



Configure MIME Type mappings in Startup.
https://github.com/aspnet/StaticFiles/blob/d16a73cc05d842390768f78134c1eeb794215fae/src/Microsoft.AspNet.StaticFiles/FileExtensionContentTypeProvider.cs



Exception Filter
public class AppExceptionFilterAttribute : ExceptionFilterAttribute
{
	private readonly ILogger _logger;
    public AppExceptionFilterAttribute(ILoggerFactory loggerfactory)
    {
       _logger = loggerFactory.CreateLogger<AppExceptionFilterAttribute>();
    }
    public override void OnException(ExceptionContext context)
    {
        logger.WriteError(2, "Error Occurred", context.Exception);

        context.Result = new JsonResult(
            new
            {
                context.Exception.Message,
                context.Exception.StackTrace
            });
    }
}
//Register your filter as a service (Note this filter need not be an attribute as such)
services.AddTransient<AppExceptionFilterAttribute>();
services.Configure<MvcOptions>(options =>
{
    options.Filters.Add(new AppExceptionFilterAttribute());
});

//On the controller/action where you want to apply this filter,
//decorate them like
[ServiceFilter(typeof(AppExceptionFilterAttribute))]
public class HomeController : Controller
{
....
}