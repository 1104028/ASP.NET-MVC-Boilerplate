{"version":3,"sources":["jquery.validate.unobtrusive.js"],"names":["$","setValidationValues","options","ruleName","value","rules","message","messages","splitAndTrim","replace","split","escapeAttributeValue","getModelPrefix","fieldName","substr","lastIndexOf","appendModelPrefix","prefix","indexOf","onError","error","inputElement","container","this","find","name","replaceAttrValue","attr","parseJSON","removeClass","addClass","data","empty","appendTo","hide","onErrors","event","validator","list","length","errorList","each","html","onSuccess","removeData","onReset","$form","resetForm","validationInfo","form","result","data_validation","onResetProxy","proxy","defaultOptions","$jQval","unobtrusive","execInContext","args","func","isFunction","apply","errorClass","errorElement","errorPlacement","arguments","invalidHandler","success","attachValidation","off","on","validate","valid","adapters","parseElement","element","skipAttach","valInfo","$element","parents","paramValues","undefined","params","adapt","extend","__dummy__","parse","selector","$selector","$forms","addBack","filter","add","has","info","adapterName","fn","push","addBool","addMinMax","minRuleName","maxRuleName","minMaxRuleName","minAttribute","maxAttribute","min","max","addSingleVal","attribute","addMethod","match","optional","RegExp","exec","index","nonalphamin","methods","extension","other","fullOtherName","tagName","toUpperCase","type","url","additionalfields","i","paramName","val","regex","document","jQuery"],"mappings":"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","file":"jquery-validate-unobtrusive.js","sourcesContent":["/*!\n** Unobtrusive validation support library for jQuery and jQuery Validate\n** Copyright (C) Microsoft Corporation. All rights reserved.\n*/\n\n/*jslint white: true, browser: true, onevar: true, undef: true, nomen: true, eqeqeq: true, plusplus: true, bitwise: true, regexp: true, newcap: true, immed: true, strict: false */\n/*global document: false, jQuery: false */\n\n(function ($) {\n    var $jQval = $.validator,\n        adapters,\n        data_validation = \"unobtrusiveValidation\";\n\n    function setValidationValues(options, ruleName, value) {\n        options.rules[ruleName] = value;\n        if (options.message) {\n            options.messages[ruleName] = options.message;\n        }\n    }\n\n    function splitAndTrim(value) {\n        return value.replace(/^\\s+|\\s+$/g, \"\").split(/\\s*,\\s*/g);\n    }\n\n    function escapeAttributeValue(value) {\n        // As mentioned on http://api.jquery.com/category/selectors/\n        return value.replace(/([!\"#$%&'()*+,./:;<=>?@\\[\\\\\\]^`{|}~])/g, \"\\\\$1\");\n    }\n\n    function getModelPrefix(fieldName) {\n        return fieldName.substr(0, fieldName.lastIndexOf(\".\") + 1);\n    }\n\n    function appendModelPrefix(value, prefix) {\n        if (value.indexOf(\"*.\") === 0) {\n            value = value.replace(\"*.\", prefix);\n        }\n        return value;\n    }\n\n    function onError(error, inputElement) {  // 'this' is the form element\n        var container = $(this).find(\"[data-valmsg-for='\" + escapeAttributeValue(inputElement[0].name) + \"']\"),\n            replaceAttrValue = container.attr(\"data-valmsg-replace\"),\n            replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) !== false : null;\n\n        container.removeClass(\"field-validation-valid\").addClass(\"field-validation-error\");\n        error.data(\"unobtrusiveContainer\", container);\n\n        if (replace) {\n            container.empty();\n            error.removeClass(\"input-validation-error\").appendTo(container);\n        }\n        else {\n            error.hide();\n        }\n    }\n\n    function onErrors(event, validator) {  // 'this' is the form element\n        var container = $(this).find(\"[data-valmsg-summary=true]\"),\n            list = container.find(\"ul\");\n\n        if (list && list.length && validator.errorList.length) {\n            list.empty();\n            container.addClass(\"validation-summary-errors\").removeClass(\"validation-summary-valid\");\n\n            $.each(validator.errorList, function () {\n                $(\"<li />\").html(this.message).appendTo(list);\n            });\n        }\n    }\n\n    function onSuccess(error) {  // 'this' is the form element\n        var container = error.data(\"unobtrusiveContainer\"),\n            replaceAttrValue = container.attr(\"data-valmsg-replace\"),\n            replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;\n\n        if (container) {\n            container.addClass(\"field-validation-valid\").removeClass(\"field-validation-error\");\n            error.removeData(\"unobtrusiveContainer\");\n\n            if (replace) {\n                container.empty();\n            }\n        }\n    }\n\n    function onReset(event) {  // 'this' is the form element\n        var $form = $(this);\n        $form.data(\"validator\").resetForm();\n        $form.find(\".validation-summary-errors\")\n            .addClass(\"validation-summary-valid\")\n            .removeClass(\"validation-summary-errors\");\n        $form.find(\".field-validation-error\")\n            .addClass(\"field-validation-valid\")\n            .removeClass(\"field-validation-error\")\n            .removeData(\"unobtrusiveContainer\")\n            .find(\">*\")  // If we were using valmsg-replace, get the underlying error\n                .removeData(\"unobtrusiveContainer\");\n    }\n\n    function validationInfo(form) {\n        var $form = $(form),\n            result = $form.data(data_validation),\n            onResetProxy = $.proxy(onReset, form),\n            defaultOptions = $jQval.unobtrusive.options || {},\n            execInContext = function (name, args) {\n                var func = defaultOptions[name];\n                func && $.isFunction(func) && func.apply(form, args);\n            }\n\n        if (!result) {\n            result = {\n                options: {  // options structure passed to jQuery Validate's validate() method\n                    errorClass: defaultOptions.errorClass || \"input-validation-error\",\n                    errorElement: defaultOptions.errorElement || \"span\",\n                    errorPlacement: function () {\n                        onError.apply(form, arguments);\n                        execInContext(\"errorPlacement\", arguments);\n                    },\n                    invalidHandler: function () {\n                        onErrors.apply(form, arguments);\n                        execInContext(\"invalidHandler\", arguments);\n                    },\n                    messages: {},\n                    rules: {},\n                    success: function () {\n                        onSuccess.apply(form, arguments);\n                        execInContext(\"success\", arguments);\n                    }\n                },\n                attachValidation: function () {\n                    $form\n                        .off(\"reset.\" + data_validation, onResetProxy)\n                        .on(\"reset.\" + data_validation, onResetProxy)\n                        .validate(this.options);\n                },\n                validate: function () {  // a validation function that is called by unobtrusive Ajax\n                    $form.validate();\n                    return $form.valid();\n                }\n            };\n            $form.data(data_validation, result);\n        }\n\n        return result;\n    }\n\n    $jQval.unobtrusive = {\n        adapters: [],\n\n        parseElement: function (element, skipAttach) {\n            /// <summary>\n            /// Parses a single HTML element for unobtrusive validation attributes.\n            /// </summary>\n            /// <param name=\"element\" domElement=\"true\">The HTML element to be parsed.</param>\n            /// <param name=\"skipAttach\" type=\"Boolean\">[Optional] true to skip attaching the\n            /// validation to the form. If parsing just this single element, you should specify true.\n            /// If parsing several elements, you should specify false, and manually attach the validation\n            /// to the form when you are finished. The default is false.</param>\n            var $element = $(element),\n                form = $element.parents(\"form\")[0],\n                valInfo, rules, messages;\n\n            if (!form) {  // Cannot do client-side validation without a form\n                return;\n            }\n\n            valInfo = validationInfo(form);\n            valInfo.options.rules[element.name] = rules = {};\n            valInfo.options.messages[element.name] = messages = {};\n\n            $.each(this.adapters, function () {\n                var prefix = \"data-val-\" + this.name,\n                    message = $element.attr(prefix),\n                    paramValues = {};\n\n                if (message !== undefined) {  // Compare against undefined, because an empty message is legal (and falsy)\n                    prefix += \"-\";\n\n                    $.each(this.params, function () {\n                        paramValues[this] = $element.attr(prefix + this);\n                    });\n\n                    this.adapt({\n                        element: element,\n                        form: form,\n                        message: message,\n                        params: paramValues,\n                        rules: rules,\n                        messages: messages\n                    });\n                }\n            });\n\n            $.extend(rules, { \"__dummy__\": true });\n\n            if (!skipAttach) {\n                valInfo.attachValidation();\n            }\n        },\n\n        parse: function (selector) {\n            /// <summary>\n            /// Parses all the HTML elements in the specified selector. It looks for input elements decorated\n            /// with the [data-val=true] attribute value and enables validation according to the data-val-*\n            /// attribute values.\n            /// </summary>\n            /// <param name=\"selector\" type=\"String\">Any valid jQuery selector.</param>\n\n            // $forms includes all forms in selector's DOM hierarchy (parent, children and self) that have at least one\n            // element with data-val=true\n            var $selector = $(selector),\n                $forms = $selector.parents()\n                                  .addBack()\n                                  .filter(\"form\")\n                                  .add($selector.find(\"form\"))\n                                  .has(\"[data-val=true]\");\n\n            $selector.find(\"[data-val=true]\").each(function () {\n                $jQval.unobtrusive.parseElement(this, true);\n            });\n\n            $forms.each(function () {\n                var info = validationInfo(this);\n                if (info) {\n                    info.attachValidation();\n                }\n            });\n        }\n    };\n\n    adapters = $jQval.unobtrusive.adapters;\n\n    adapters.add = function (adapterName, params, fn) {\n        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation.</summary>\n        /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>\n        /// <param name=\"params\" type=\"Array\" optional=\"true\">[Optional] An array of parameter names (strings) that will\n        /// be extracted from the data-val-nnnn-mmmm HTML attributes (where nnnn is the adapter name, and\n        /// mmmm is the parameter name).</param>\n        /// <param name=\"fn\" type=\"Function\">The function to call, which adapts the values from the HTML\n        /// attributes into jQuery Validate rules and/or messages.</param>\n        /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n        if (!fn) {  // Called with no params, just a function\n            fn = params;\n            params = [];\n        }\n        this.push({ name: adapterName, params: params, adapt: fn });\n        return this;\n    };\n\n    adapters.addBool = function (adapterName, ruleName) {\n        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where\n        /// the jQuery Validate validation rule has no parameter values.</summary>\n        /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>\n        /// <param name=\"ruleName\" type=\"String\" optional=\"true\">[Optional] The name of the jQuery Validate rule. If not provided, the value\n        /// of adapterName will be used instead.</param>\n        /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n        return this.add(adapterName, function (options) {\n            setValidationValues(options, ruleName || adapterName, true);\n        });\n    };\n\n    adapters.addMinMax = function (adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {\n        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where\n        /// the jQuery Validate validation has three potential rules (one for min-only, one for max-only, and\n        /// one for min-and-max). The HTML parameters are expected to be named -min and -max.</summary>\n        /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n        /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>\n        /// <param name=\"minRuleName\" type=\"String\">The name of the jQuery Validate rule to be used when you only\n        /// have a minimum value.</param>\n        /// <param name=\"maxRuleName\" type=\"String\">The name of the jQuery Validate rule to be used when you only\n        /// have a maximum value.</param>\n        /// <param name=\"minMaxRuleName\" type=\"String\">The name of the jQuery Validate rule to be used when you\n        /// have both a minimum and maximum value.</param>\n        /// <param name=\"minAttribute\" type=\"String\" optional=\"true\">[Optional] The name of the HTML attribute that\n        /// contains the minimum value. The default is \"min\".</param>\n        /// <param name=\"maxAttribute\" type=\"String\" optional=\"true\">[Optional] The name of the HTML attribute that\n        /// contains the maximum value. The default is \"max\".</param>\n        /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n        return this.add(adapterName, [minAttribute || \"min\", maxAttribute || \"max\"], function (options) {\n            var min = options.params.min,\n                max = options.params.max;\n\n            if (min && max) {\n                setValidationValues(options, minMaxRuleName, [min, max]);\n            }\n            else if (min) {\n                setValidationValues(options, minRuleName, min);\n            }\n            else if (max) {\n                setValidationValues(options, maxRuleName, max);\n            }\n        });\n    };\n\n    adapters.addSingleVal = function (adapterName, attribute, ruleName) {\n        /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where\n        /// the jQuery Validate validation rule has a single value.</summary>\n        /// <param name=\"adapterName\" type=\"String\">The name of the adapter to be added. This matches the name used\n        /// in the data-val-nnnn HTML attribute(where nnnn is the adapter name).</param>\n        /// <param name=\"attribute\" type=\"String\">[Optional] The name of the HTML attribute that contains the value.\n        /// The default is \"val\".</param>\n        /// <param name=\"ruleName\" type=\"String\" optional=\"true\">[Optional] The name of the jQuery Validate rule. If not provided, the value\n        /// of adapterName will be used instead.</param>\n        /// <returns type=\"jQuery.validator.unobtrusive.adapters\" />\n        return this.add(adapterName, [attribute || \"val\"], function (options) {\n            setValidationValues(options, ruleName || adapterName, options.params[attribute]);\n        });\n    };\n\n    $jQval.addMethod(\"__dummy__\", function (value, element, params) {\n        return true;\n    });\n\n    $jQval.addMethod(\"regex\", function (value, element, params) {\n        var match;\n        if (this.optional(element)) {\n            return true;\n        }\n\n        match = new RegExp(params).exec(value);\n        return (match && (match.index === 0) && (match[0].length === value.length));\n    });\n\n    $jQval.addMethod(\"nonalphamin\", function (value, element, nonalphamin) {\n        var match;\n        if (nonalphamin) {\n            match = value.match(/\\W/g);\n            match = match && match.length >= nonalphamin;\n        }\n        return match;\n    });\n\n    if ($jQval.methods.extension) {\n        adapters.addSingleVal(\"accept\", \"mimtype\");\n        adapters.addSingleVal(\"extension\", \"extension\");\n    } else {\n        // for backward compatibility, when the 'extension' validation method does not exist, such as with versions\n        // of JQuery Validation plugin prior to 1.10, we should use the 'accept' method for\n        // validating the extension, and ignore mime-type validations as they are not supported.\n        adapters.addSingleVal(\"extension\", \"extension\", \"accept\");\n    }\n\n    adapters.addSingleVal(\"regex\", \"pattern\");\n    adapters.addBool(\"creditcard\").addBool(\"date\").addBool(\"digits\").addBool(\"email\").addBool(\"number\").addBool(\"url\");\n    adapters.addMinMax(\"length\", \"minlength\", \"maxlength\", \"rangelength\").addMinMax(\"range\", \"min\", \"max\", \"range\");\n    adapters.addMinMax(\"minlength\", \"minlength\").addMinMax(\"maxlength\", \"minlength\", \"maxlength\");\n    adapters.add(\"equalto\", [\"other\"], function (options) {\n        var prefix = getModelPrefix(options.element.name),\n            other = options.params.other,\n            fullOtherName = appendModelPrefix(other, prefix),\n            element = $(options.form).find(\":input\").filter(\"[name='\" + escapeAttributeValue(fullOtherName) + \"']\")[0];\n\n        setValidationValues(options, \"equalTo\", element);\n    });\n    adapters.add(\"required\", function (options) {\n        // jQuery Validate equates \"required\" with \"mandatory\" for checkbox elements\n        if (options.element.tagName.toUpperCase() !== \"INPUT\" || options.element.type.toUpperCase() !== \"CHECKBOX\") {\n            setValidationValues(options, \"required\", true);\n        }\n    });\n    adapters.add(\"remote\", [\"url\", \"type\", \"additionalfields\"], function (options) {\n        var value = {\n            url: options.params.url,\n            type: options.params.type || \"GET\",\n            data: {}\n        },\n            prefix = getModelPrefix(options.element.name);\n\n        $.each(splitAndTrim(options.params.additionalfields || options.element.name), function (i, fieldName) {\n            var paramName = appendModelPrefix(fieldName, prefix);\n            value.data[paramName] = function () {\n                return $(options.form).find(\":input\").filter(\"[name='\" + escapeAttributeValue(paramName) + \"']\").val();\n            };\n        });\n\n        setValidationValues(options, \"remote\", value);\n    });\n    adapters.add(\"password\", [\"min\", \"nonalphamin\", \"regex\"], function (options) {\n        if (options.params.min) {\n            setValidationValues(options, \"minlength\", options.params.min);\n        }\n        if (options.params.nonalphamin) {\n            setValidationValues(options, \"nonalphamin\", options.params.nonalphamin);\n        }\n        if (options.params.regex) {\n            setValidationValues(options, \"regex\", options.params.regex);\n        }\n    });\n\n    $(function () {\n        $jQval.unobtrusive.parse(document);\n    });\n}(jQuery));"],"sourceRoot":"/source/"}